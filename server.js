const express = require('express');
const app = express();
const mongoose = require('mongoose');
const Inventory = require('./inventoryModel');


//**********************************************************************//
// middlewares
app.set('views');   // set 'views' folder to path
app.set('view engine', 'pug');
app.use(express.static('public'));  // static resources
app.use(express.json());
app.use(express.urlencoded({extended: true}));

// log requests
app.use((req, res, next) => {
    console.log(`${req.method}: ${req.url}`);
    next();
});

app.get('/', (req, res) => { res.render('items'); });
app.get('/items?', sendItems);   // send list of matched items
app.post('/', createANewItem);   // create a new inventory item
app.get('/:itemID', validateID, sendAnItem);   // send the page of a specific item
app.put('/:itemID', validateID, modifyAnItem);   // modify the data of a specific item
app.delete('/:itemID', validateID, deleteAnItem);   // delete the data of a specific item


//**********************************************************************//
// FUNCTIONS


function sendItems(req, res) {
    // console.log("req.query", req.query);
    let query = {};
    if (req.query.name) query.name = {$regex: req.query.name, $options: "i"};   // case insensitive
    if (req.query.min_cost) {
        if (query.hasOwnProperty("unit_cost")) query.unit_cost.$gte = Number(req.query.min_cost);
        else query.unit_cost = { $gte: Number(req.query.min_cost) };
    }
    if (req.query.max_cost) {
        if (query.hasOwnProperty("unit_cost")) query.unit_cost.$lte = Number(req.query.max_cost);
        else query.unit_cost = { $lte: Number(req.query.max_cost) };
    }
    if (req.query.min_quantity) {
        if (query.hasOwnProperty("unit_cost")) query.quantity.$gte = Number(req.query.min_quantity);
        else query.quantity = { $gte: Number(req.query.min_quantity) };
    }
    if (req.query.max_quantity) {
        if (query.hasOwnProperty("unit_cost")) query.quantity.$lte = Number(req.query.max_quantity);
        else query.quantity = { $lte: Number(req.query.max_quantity) };
    }
    // console.log("query", query);
    Inventory.find(query, {name:1})   // only need ids and names
    .exec((err, items) => {
        if (err) throw err;
        // console.log(items);
        res.status(200).send(items);
    });
}

// req.body = {name, description, unit_cost, quantity} (all Strings)
// send back _id generated by mongodb
function createANewItem(req, res) {
    // console.log(req.body);
    if (req.body.name && req.body.unit_cost && req.body.quantity) {
        let newItem = new Inventory({
            name: req.body.name,
            description: req.body.description,
            unit_cost: Number(req.body.unit_cost),
            quantity: Number(req.body.quantity)
        });
        newItem.save((err, inventory) => {
            if (err) {
                let message = '';
                if (err.errors.hasOwnProperty("unit_cost")) message += `${err.errors.unit_cost.properties.message}\n`;
                if (err.errors.hasOwnProperty("quantity")) message += `${err.errors.quantity.properties.message}\n`;
                res.status(400).send(message);
                return;
            }
            res.status(201).send(inventory._id);
        });
    } else {   // missing attributes
        res.status(400).send("Bad Request");
        return;
    }
}


function validateID(req, res, next) {
    let itemID;
    try { itemID = new mongoose.Types.ObjectId(req.params.itemID); }
    catch {
        res.status(404).send("Unknown ID");
        return;
    }
    req.itemID = itemID;
    next();
}


function sendAnItem(req, res) {
    Inventory.findById(req.itemID)
    .exec((err, item) => {
        if (err) throw err;
        if (item == null) {
            res.status(404).send("Unknown ID");
            return;
        }
        res.render('item', { item: item });
    });
}


// req.body = {name, description, unit_cost, quantity} (all Strings)
function modifyAnItem(req, res) {
    // console.log(req.body);
    if (req.body.name && req.body.unit_cost && req.body.quantity) {
        Inventory.findByIdAndUpdate(req.itemID, {
            name: req.body.name,
            description: req.body.description,
            unit_cost: Number(req.body.unit_cost),
            quantity: Number(req.body.quantity)
        }, {runValidators: true})
        .exec((err, item) => {
            if (err) {
                let message = '';
                if (err.errors.hasOwnProperty("unit_cost")) message += `${err.errors.unit_cost.properties.message}\n`;
                if (err.errors.hasOwnProperty("quantity")) message += `${err.errors.quantity.properties.message}\n`;
                res.status(400).send(message);
                return;
            }
            res.status(200).send();
        });
    } else {   // missing attributes
        res.status(400).send("Bad Request");
        return;
    }
}


function deleteAnItem(req, res) {
    Inventory.findByIdAndDelete(req.itemID)
    .exec((err, item) => {
        if (err) throw err;
        res.status(200).send();
    });
}


//**********************************************************************//
// start the server

mongoose.connect(`mongodb://localhost:27017/inventoryDB`, {useNewUrlParser: true});
let db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
	app.listen(process.env.PORT || 3000);
    console.log(`Server listening at port ${process.env.PORT || 3000}.`);
});